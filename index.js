// Generated by CoffeeScript 1.7.0
(function() {
  var DropPlugin, coffee_script, ever, playerdat;

  ever = require('ever');

  coffee_script = require('coffee-script');

  playerdat = require('playerdat');

  require('string.prototype.endswith');

  module.exports = function(game, opts) {
    return new DropPlugin(game, opts);
  };

  module.exports.pluginInfo = {
    loadAfter: ['voxel-stitch']
  };

  DropPlugin = (function() {
    function DropPlugin(game, opts) {
      var _ref, _ref1, _ref2, _ref3;
      this.game = game;
      if (!this.game.isClient) {
        return;
      }
      this.packs = (_ref = (_ref1 = this.game.materials) != null ? _ref1.artPacks : void 0) != null ? _ref : (_ref2 = this.game.plugins) != null ? (_ref3 = _ref2.get('voxel-stitch')) != null ? _ref3.artpacks : void 0 : void 0;
      if (this.packs == null) {
        throw new Error('voxel-drop requires voxel-stitch or voxel-texture-shader with artPacks');
      }
      this.body = ever(document.body);
      this.enable();
    }

    DropPlugin.prototype.enable = function() {
      this.body.on('dragover', this.dragover = function(ev) {
        ev.stopPropagation();
        return ev.preventDefault();
      });
      return this.body.on('drop', this.drop = (function(_this) {
        return function(mouseEvent) {
          var file, files, shouldAdd, shouldClear, _i, _len, _results;
          mouseEvent.stopPropagation();
          mouseEvent.preventDefault();
          console.log('drop', mouseEvent);
          files = mouseEvent.target.files || mouseEvent.dataTransfer.files;
          console.log('Dropped', files);
          _results = [];
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            console.log('Reading dropped', file);
            if (file.name.endsWith('.zip') || file.name.endsWith('.jar')) {
              shouldClear = mouseEvent.shiftKey;
              _results.push(_this.loadArtPack(file, shouldClear));
            } else if (file.name.endsWith('.js')) {
              _results.push(_this.loadScript(file));
            } else if (file.name.endsWith('.coffee')) {
              _results.push(_this.loadScript(file));
            } else if (file.name.endsWith('.dat')) {
              shouldAdd = mouseEvent.shiftKey;
              _results.push(_this.loadPlayerDat(file, shouldAdd));
            } else {
              _results.push(window.alert("Unrecognized file dropped: " + file.name + ". Try dropping a resourcepack/artpack (.zip)"));
            }
          }
          return _results;
        };
      })(this));
    };

    DropPlugin.prototype.readAll = function(file, cb) {
      var reader;
      reader = new FileReader();
      ever(reader).on('load', (function(_this) {
        return function(readEvent) {
          var result;
          if (readEvent.total !== readEvent.loaded) {
            return;
          }
          result = readEvent.currentTarget.result;
          return cb(result);
        };
      })(this));
      return reader;
    };

    DropPlugin.prototype.readAllText = function(file, cb) {
      return (this.readAll(file, cb)).readAsText(file);
    };

    DropPlugin.prototype.readAllData = function(file, cb) {
      return (this.readAll(file, cb)).readAsArrayBuffer(file);
    };

    DropPlugin.prototype.loadScript = function(file) {
      return this.readAllText(file, (function(_this) {
        return function(rawText) {
          var createCreatePlugin, createPlugin, e, name, opts, plugin, text;
          if (file.name.endsWith('.coffee')) {
            text = coffee_script.compile(rawText);
          } else {
            text = rawText;
          }
          try {
            createCreatePlugin = new Function("var module = {exports: {}}; var require = " + _this.game.plugins.require + "; " + text + " return module.exports;");
          } catch (_error) {
            e = _error;
            window.alert("Exception loading plugin " + file.name + ": " + e);
            throw e;
          }
          createPlugin = createCreatePlugin();
          name = file.name;
          opts = {};
          console.log("loadScript #file.name = " + createPlugin);
          if (!createPlugin || typeof createPlugin !== 'function') {
            console.log("Ignored non-plugin " + name + ", returned " + createPlugin);
            return;
          }
          plugin = _this.game.plugins.instantiate(createPlugin, name, opts);
          if (!plugin) {
            return window.alert('Failed to load plugin ' + name);
          } else {
            return console.log("Loaded plugin: " + name + " = " + plugin);
          }
        };
      })(this));
    };

    DropPlugin.prototype.loadArtPack = function(file, shouldClear) {
      return this.readAllData(file, (function(_this) {
        return function(arrayBuffer) {
          if (shouldClear) {
            _this.packs.clear();
          }
          _this.packs.once('refresh', function() {
            return window.setTimeout(function() {
              var _base;
              return typeof (_base = _this.game).showAllChunks === "function" ? _base.showAllChunks() : void 0;
            }, 5000);
          });
          return _this.packs.addPack(arrayBuffer, file.name);
        };
      })(this));
    };

    DropPlugin.prototype.loadPlayerDat = function(file, shouldAdd) {
      return this.readAllData(file, (function(_this) {
        return function(arrayBuffer) {
          var carryInventory, _ref;
          carryInventory = (_ref = _this.game.plugins.get('voxel-carry')) != null ? _ref.inventory : void 0;
          if (carryInventory == null) {
            return;
          }
          return playerdat.loadInventory(arrayBuffer, function(inventory) {
            var i, _i, _ref1, _results;
            if (inventory != null) {
              if (!shouldAdd) {
                carryInventory.clear();
              }
              _results = [];
              for (i = _i = 0, _ref1 = inventory.size(); 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
                if (shouldAdd) {
                  _results.push(carryInventory.give(inventory.get(i)));
                } else {
                  _results.push(carryInventory.set(i, inventory.get(i)));
                }
              }
              return _results;
            }
          });
        };
      })(this));
    };

    DropPlugin.prototype.disable = function() {
      this.body.removeListener('dragover', this.dragover);
      return this.body.removeListener('drop', this.drop);
    };

    return DropPlugin;

  })();

}).call(this);
